{"version":3,"sources":["Components/Img.js","Components/NoImgs.js","Components/ImgList.js","Components/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["Img","props","react_default","a","createElement","href","link","src","url","alt","user","name","NoImgs","className","ImgList","imgs","results","data","length","map","img","Components_Img","urls","thumb","links","html","key","id","Components_NoImgs","SearchForm","state","searchText","onSearchChange","e","_this","setState","target","value","handleSubmit","preventDefault","onSearch","query","currentTarget","reset","_this2","this","onSubmit","htmlFor","type","onChange","ref","input","placeholder","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","performSearch","arguments","undefined","axios","get","concat","then","loadingState","catch","err","console","log","SearchForm_SearchForm","Components_ImgList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3973747.chunk.js","sourcesContent":["import React from 'react';\n\nconst Img = props =>\n\t<li>\n\t\t<a href={props.link}>\n\t\t\t<img src={props.url} alt=\"beautiful\" />\n\t\t</a>\n\t\t<p>\n\t\t\n\t\t\n\t\t\tPhoto by\n\t\t\t<a href={props.user}>{props.name}</a>\n\t\t\t<a href={props.link}> See on Unsplash</a>\n\n\t\t    \n\t\t</p>\n\t</li>;\n\nexport default Img;","import React from 'react';\n\nconst NoImgs = props => (\n  <li className='no-imgs'>\n    <i className=\"material-icons icon-img\">dissatisfied</i>\n    <h3>No Images match your search.</h3>\n  </li>\n);\n\nexport default NoImgs;","import React from 'react';\nimport Img from './Img';\nimport NoImgs from './NoImgs';\n\nconst ImgList = props => {\n\tconst results = props.data;\n\tlet imgs;\n\tif (results.length > 0) {\n\t\timgs = results.map(img =>\n\t\t\t<Img\n\t\t\t\turl={img.urls.thumb}\n\t\t\t\tuser={img.user.links.html}\n\t\t\t\tname={img.user.name}\n\t\t\t\tlink={img.links.html}\n\t\t\t\tkey={img.id}\n\t\t\t/>\n\t\t);\n\t} else {\n\t\timgs = <NoImgs />;\n\t}\n\treturn (\n\t\t<ul className=\"img-list\">\n\t\t\t{imgs}\n\t\t</ul>\n\t);\n};\n\nexport default ImgList;","import React, { Component } from 'react';\n\nexport default class SearchForm extends Component {\n\tstate = {\n\t\tsearchText: ''\n\t};\n\n\tonSearchChange = e => {\n\t\tthis.setState({ searchText: e.target.value });\n\t};\n\n\thandleSubmit = e => {\n\t\te.preventDefault();\n\t\tthis.props.onSearch(this.query.value);\n\t\te.currentTarget.reset();\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"search-form\" onSubmit={this.handleSubmit}>\n\t\t\t\t<label className=\"is-hidden\" htmlFor=\"search\">Search</label>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"search\"\n\t\t\t\t\tonChange={this.onSearchChange}\n\t\t\t\t\tref={input => (this.query = input)}\n\t\t\t\t\tname=\"search\"\n\t\t\t\t\tplaceholder=\"Search...\"\n\t\t\t\t/>\n\t\t\t\t<button type=\"submit\" id=\"submit\" className=\"search-button\">\n\t\t\t\t\t<i className=\"material-icons icn-search\">search</i>\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\nimport ImgList from './Components/ImgList';\nimport SearchForm from './Components/SearchForm';\n\n\nexport default class App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\timgs: [],\n\t\t\tloadingState: true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.performSearch();\n\t}\n\n\tperformSearch = (query = 'sun') => {\n\t\taxios\n\t\t\t.get(\n\t\t\t\t`https://api.unsplash.com/search/photos/?page=1&per_page=21&query=${query}&client_id=67148e3ee5523b5c4637cbba6d317bdd39d16055a114b1b4700bc85d43b5b9fd`\n\t\t\t)\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({ imgs: data.data.results, loadingState: false });\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log('Error happened during fetching!', err);\n\t\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"main-header\">\n\t\t\t\t\t<div className=\"inner\">\n\t\t\t\t\t\t<h1 className=\"main-title\">Shujaaz</h1>\n\t\t\t\t\t\t<SearchForm onSearch={this.performSearch} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"main-content\">\n\t\t\t\t\t{this.state.loadingState\n\t\t\t\t\t\t? <p>Loading</p>\n\t\t\t\t\t\t: <ImgList data={this.state.imgs} />}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}